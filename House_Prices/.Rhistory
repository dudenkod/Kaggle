Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
control <- trainControl(method="cv", number=10, repeats=5)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
range
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="rf", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
?rfeControl
?train
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="Accuracy", method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="Accuracy", method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
PREDICTION_FULL = predict(model_RF_FULL, newdata=test[,-c(1,6)])
test$mult = test$hair_length*test$has_soul
test$mult2 = test$hair_length*test$has_soul/test$rotting_flesh
test$mult3 = test$hair_length*test$has_soul*test$bone_length
test$mult4 = test$hair_length*test$has_soul*test$bone_length/test$rotting_flesh
test$mult4_2 = test$mult4*test$mult4
test$mult4_3 = test$mult3*test$mult3
test$mult4_33 = test$mult3*test$mult3*test$mult3
test$mult4_44 = test$mult4*test$mult4*test$mult4
test$mult4_3 = test$mult4_2*test$mult4_2/test$rotting_flesh
test$mult4_4 = test$mult4*test$mult4/test$rotting_flesh
test$mult3_2 = test$mult3*test$mult3
PREDICTION_FULL = predict(model_RF_FULL, newdata=test[,-c(1,6)])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
hist(Train_v3$has_soul, col=Train_v3$type)
hist(Train_v3$has_soul, col=Train_v3$type, breaks = 100)
hist(Train_v3["type"=="Ghost"]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghost"]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghost",]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghoul",]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Goblin",]$has_soul,  breaks = 100)
hist(Train_v3$bone_length, col=Train_v3$type, breaks = 100)
hist(Train_v3$hair_length, col=Train_v3$type, breaks = 100)
hist(Train_v3$color, col=Train_v3$type, breaks = 100)
hist(Train_v3$rotting_flesh, col=Train_v3$type, breaks = 100)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], metric="Accuracy",  method="gbm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="SVMRadial", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="SVM", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="glm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=control,  metric = "ROC", n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svmRadial", preProcess="range", trControl=control,  metric = "ROC", n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svmRadial", preProcess="range", trControl=control, tuneLength=10, metric = "ROC", n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
## Estimate class probabilities
classProbs = TRUE,
## Evaluate performance using
## the following function
summaryFunction = twoClassSummary)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitCcontrol,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitControl,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitControl,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
correlationMatrix <- cor(train)
library(mlbench)
correlationMatrix <- cor(train)
correlationMatrix <- cor(Train_v3)
correlationMatrix <- cor(Train_v3[,-c(1,6)])
correlationMatrix <- cor(Train_v3[,-c(1,6,7)])
print(correlationMatrix)
correlationMatrix <- cor(train[,-c(1,6,7)])
print(correlationMatrix)
featurePlot(x=train, y=train$type, plot="pairs")
library(rpart)
my_tree_two <- rpart(type ~., data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
my_tree_two <- rpart(type ~., data = Train_v3, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
correlationMatrix <- cor(Train_v3[,-c(1,6,7)])
print(correlationMatrix)
featurePlot(x=train, y=Train_v3$type, plot="pairs")
featurePlot(x=Train_v3, y=Train_v3$type, plot="pairs")
print(correlationMatrix)
nearzero <- nearZeroVar(Train_v3, saveMetrics = TRUE)
nearzero
features_corr <- findCorrelation(cor(Train_v3[,-c(6,7)]), cutoff=0.4)
features_corr
names(Train_v3[, -c(6,7)])[features_corr]
Train_v4 = Train_v3[,-features_corr]
View(Train_v4)
my_tree_two <- rpart(type ~., data = Train_v4, method = "class")
str(Train_v4)
View(Train_v3)
Train_v4 = cbind(Train_v3[,-features_corr],Train_v3$color,Train_v3$type)
str(Train_v4)
?cbind
Train_v4 = cbind(Train_v3[,-features_corr],Train_v3$color,Train_v3$type, deparse.level = 0)
str(Train_v4)
Train_v4$color = Train_v3$color
Train_v4$type = Train_v3$type
str(Train_v4)
Train_v4 = Train_v3[,-features_corr]
Train_v4$color = Train_v3$color
Train_v4$type = Train_v3$type
str(Train_v4)
#rpart attempts
library(rpart)
my_tree_two <- rpart(type ~., data = Train_v4, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_two)
?fancyRpartPlot
model_RF_FULL = train(type~., data=Train_v4[,-c(1,8)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
Test_v4 = Test_v3[,-features_corr]
Test_v4$color = Test_v3$color
View(Test_v4)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
Test_v4$type = Test_v3$type
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
model_RF_FULL = train(type~., data=Train_v4[,-c(1,8)],  method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)),  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
rm(list=ls())
set.seed(666)
library(doMC)
registerDoMC(cores = 2)
library(caret); library(kernlab); library(ISLR); library(RANN);
library(DMwR);library(MASS); library(randomForest); library(e1071);
library(dplyr)
Train_FULL=read.table(file="./train.csv", header = TRUE, sep=",")
test=read.csv(file="./test.csv", header = TRUE)
Train_v2 = Train_FULL
features_corr <- findCorrelation(cor(Train_v2[,-c(1:117,132)]), cutoff=0.5)
setwd("IOF/Kaggle/Allstate_Claims_Severity/")
Train_FULL=read.table(file="./train.csv", header = TRUE, sep=",")
test=read.csv(file="./test.csv", header = TRUE)
Train_v2 = Train_FULL
features_corr <- findCorrelation(cor(Train_v2[,-c(1:117,132)]), cutoff=0.5)
features_corr
corr_names = names(Train_v2[,-c(1:117,132)])[features_corr]
Train_v3 = Train_v2[,-corr_names]
Train_v3 = Train_v2[-corr_names]
Train_v3 = Train_v2[,-c(corr_names)]
Train_v3 = Train_v2[, !names(Train_v2) %in% corr_names]
q = !names(Train_v2) %in% corr_names
;
q = (!names(Train_v2) %in% corr_names)
q
features_corr
corr_names
qplot(Train_v2["cont6"],Train_v2["cont10"])
qplot(Train_v3["cont6"],Train_v3["cont10"])
qplot(Train_v2["cont6"],Train_v2["cont10"])
qplot(1:nrow(Train_v2),Train_v2["cont10"])
summary(Train_v3[grepl("cont",names(Train_v3)], value=TRUE)])
summary(Train_v3[grepl("cont",names(Train_v3), value=TRUE)])
summary(Train_v3[,grepl("cont+",names(Train_v3), value=TRUE)])
summary(Train_v3[,grepl("cont+",names(Train_v3))])
qplot(Train_v3["cont2"], Train_v3["loss"])
qplot(Train_v3["cont3"], Train_v3["loss"])
qplot(Train_v3["cont4"], Train_v3["loss"])
qplot(Train_v3["cont5"], Train_v3["loss"])
qplot(Train_v3["cont7"], Train_v3["loss"])
qplot(Train_v3["cont13"], Train_v3["loss"])
qplot(Train_v3["cont14"], Train_v3["loss"])
setwd("../House_Prices/")
Train_FULL=read.table(file="./train.csv", header = TRUE, sep=",")
test=read.csv(file="./test.csv", header = TRUE)
str(Train_FULL)
summary(Train_FULL)
Test_FULL=read.csv(file="./test.csv", header = TRUE)
Train_v2 = Train_FULL
Test_v2 = Test_FULL
library("Amelia")
missmap(Train_v2, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
str(Train_FULL)
summary(Train_FULL)
for i in names(Train_v2):
print(i)
for i in names(Train_v2):
i
for i in names(Train_v2):
i
for i %in% names(Train_v2):
print(i)
for i %in% names(Train_v2):
print(i)
for (i in names(Train_v2)):
print(paste("NAME:",i))
for (i in names(Train_v2)){
print(paste("NAME:",i))
}
for (i in names(Train_v2)){
print(paste("NAME:",i))
NaS = sum(isna(Train_v2[,i]))/nrow(Train_v2)
print(paste("percentage of missing:",i))
}
for (i in names(Train_v2)){
print(paste("NAME:",i))
NaS = sum(is.na(Train_v2[,i]))/nrow(Train_v2)
print(paste("percentage of missing:",NaS))
}
for (i in names(Train_v2)){
print(paste("NAME:",i))
NaS = sum(is.na(Train_v2[,i]))/nrow(Train_v2)
if (NaS > 0.5){print(paste("percentage of missing:",NaS))}
}
for (i in names(Train_v2)){
print(paste("NAME:",i))
NaS = sum(is.na(Train_v2[,i]))/nrow(Train_v2)
if (NaS > 0.4){print(paste("percentage of missing:",NaS))}
}
str(names(Train_v2))
summary(names(Train_v2))
class(names(Train_v2))
NAs_vector=[]
NAs_vector= character(0)
for (i in names(Train_v2)){
NAs_vector    print(paste("NAME:",i))
NaS = sum(is.na(Train_v2[,i]))/nrow(Train_v2)
if (NaS > 0.4){
NAs_vector = c(NAs_vector, i)
print(paste("percentage of missing:",NaS))}
}
for (i in names(Train_v2)){
print(paste("NAME:",i))
NaS = sum(is.na(Train_v2[,i]))/nrow(Train_v2)
if (NaS > 0.4){
NAs_vector = c(NAs_vector, i)
print(paste("percentage of missing:",NaS))}
}
summary(Train_v2[NAs_vector])
Train_v3 = Train_v2[!NAs_vector]
Train_v3 = Train_v2[!NAs_vector]
Train_v3 = Train_v2[,!NAs_vector]
Train_v3 = Train_v2[,-NAs_vector]
Train_v3 = Train_v2[,names(Train_v2) %in% NAs_vector]
Train_v3 = Train_v2[,!names(Train_v2) %in% NAs_vector]
Train_v4 = data.frame(Id=Train_v2$Id, Train_v2[NAs_vector],knnImputation(Train_v4[,-c(1)], k=100))
Train_v4 = data.frame(Id=Train_v2$Id, Train_v2[NAs_vector],knnImputation(Train_v3[,-c(1)], k=100))
Test_v4 = data.frame(id=Test_v4$id,knnImputation(Test_v4[,-c(1)], k=25))
missmap(Train_v4, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
